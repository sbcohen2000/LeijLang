/*
 * @description: Do computations on arbitrary precision natural numbers
 */

union nat = ZERO | BASEPLUS of { base = nat, plus = int };

val base = 10;

/* nat smart constructor */
fun basePlus nat digit =
    match nat with ZERO v => if digit = 0 then ZERO ()
			     else BASEPLUS { base = ZERO (), plus = digit }
		   | BASEPLUS v => BASEPLUS { base = nat, plus = digit };

/* multiply a nat by the base */
fun timesBase n = basePlus n 0;

/* creates a natural from a list of integer digits */
fun natOfDigits dgs =
    match dgs with NIL v => ZERO ()
		   | CONS pair => basePlus (natOfDigits pair.cdr) pair.car;

/* converts a natural number into a machine integer */
fun intOfNat n =
    match n with ZERO v => 0
		 | BASEPLUS pair => pair.plus + base * intOfNat pair.base;

/* converts a machine integer into a natural */
fun natOfInt i =
    if i = 0 then ZERO ()
    else basePlus (natOfInt (i / base)) (i % base);

#assert (intOfNat (ZERO ()) = 0);
#assert (intOfNat (BASEPLUS { base = BASEPLUS { base = ZERO (), plus = 2 }, plus = 5 }) = 25);
#assert (intOfNat (natOfInt 0) = 0);
#assert (intOfNat (natOfInt 42) = 42);
#assert (intOfNat (natOfInt 100) = 100);

fun carryIntoNat n carry =
    match n with ZERO v => basePlus (ZERO ()) carry
		 | BASEPLUS pair =>
		   if carry = 0 then n
		   else {
			   val digitPlus1 = pair.plus + 1;
			   val digitMod = digitPlus1 % base;
			   val digitDiv = digitPlus1 / base;
			   basePlus (carryIntoNat pair.base digitDiv) digitMod;
		       };

fun addWithCarry n1 n2 carry =
    match n1 with ZERO v => carryIntoNat n2 carry
		  | BASEPLUS pair1 =>
		    match n2 with ZERO v => carryIntoNat n1 carry
				  | BASEPLUS pair2 =>
				    {
					val x  = pair1.plus + pair2.plus + carry;
					val d  = x % base;
					val c' = x / base;
					basePlus (addWithCarry pair1.base pair2.base c') d;
				    };

fun addNats n1 n2 = addWithCarry n1 n2 0;

#assert (intOfNat (addNats (natOfInt 42) (natOfInt 0)) = 42);
#assert (intOfNat (addNats (natOfInt 0) (natOfInt 42)) = 42);
#assert (intOfNat (addNats (natOfInt 50) (natOfInt 50)) = 100);

fun borrowFromNat n borrow =
    if borrow = 0 then n
    else match n with ZERO v => raise Negative
		      | BASEPLUS pair =>
			if pair.plus = 0
			then basePlus (borrowFromNat pair.base 1) (base - 1)
			else basePlus pair.base (pair.plus - 1);

fun subWithBorrow n1 n2 borrow =
    match n2 with ZERO v => borrowFromNat n1 borrow
		  | BASEPLUS pair2 =>
		    match n1 with ZERO v => raise Negative
				  | BASEPLUS pair1 =>
				    {
					val x  = pair1.plus - pair2.plus - borrow;
					val d  = x % base;
					val b' = if x < 0 then 1 else 0;
					basePlus (subWithBorrow pair1.base pair2.base b') d;
				    };

fun subNats n1 n2 = subWithBorrow n1 n2 0;

#assert (intOfNat (subNats (natOfInt 42) (natOfInt 0)) = 42);
#assert (intOfNat (subNats (natOfInt 80) (natOfInt 39)) = 41);
